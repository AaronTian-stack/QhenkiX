#pragma once
#include "subresource.h"

namespace qhenki::gfx
{
	// https://microsoft.github.io/DirectX-Specs/d3d/D3D12EnhancedBarriers.html#synchronization
	// https://registry.khronos.org/vulkan/specs/latest/man/html/VkPipelineStageFlagBits.html
	enum SyncStage : uint32_t
	{
        SYNC_NONE = 0,
        SYNC_ALL = 1 << 0,
        SYNC_DRAW = 1 << 1,
        SYNC_INDEX_INPUT = 1 << 2,
        SYNC_VERTEX_SHADING = 1 << 3,
        SYNC_PIXEL_SHADING = 1 << 4,
        SYNC_DEPTH_STENCIL = 1 << 5,
        SYNC_RENDER_TARGET = 1 << 6,
        SYNC_COMPUTE_SHADING = 1 << 7,
        SYNC_RAYTRACING = 1 << 8,
        SYNC_COPY = 1 << 9,
        SYNC_RESOLVE = 1 << 10,
        SYNC_EXECUTE_INDIRECT = 1 << 11,
        SYNC_PREDICATION = 1 << 12,
        SYNC_ALL_SHADING = 1 << 13,
        SYNC_NON_PIXEL_SHADING = 1 << 14,
        SYNC_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO = 1 << 15,
        SYNC_CLEAR_UNORDERED_ACCESS_VIEW = 1 << 16,
        SYNC_VIDEO_DECODE = 1 << 17,
        SYNC_VIDEO_PROCESS = 1 << 18,
        SYNC_VIDEO_ENCODE = 1 << 19,
        SYNC_BUILD_RAYTRACING_ACCELERATION_STRUCTURE = 1 << 20,
        SYNC_COPY_RAYTRACING_ACCELERATION_STRUCTURE = 1 << 21,
		//SYNC_SPLIT

		//VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001,
		//VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002,
		//VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004,
		//VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008,
		//VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,
		//VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
		//VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040,
		//VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080,
		//VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100,
		//VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200,
		//VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,
		//VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800,
		//VK_PIPELINE_STAGE_TRANSFER_BIT = 0x00001000,
		//VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000,
		//VK_PIPELINE_STAGE_HOST_BIT = 0x00004000,
		//VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000,
		//VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000,
		//// Provided by VK_VERSION_1_3
		//VK_PIPELINE_STAGE_NONE = 0,
		//// Provided by VK_EXT_transform_feedback
		//VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000,
		//// Provided by VK_EXT_conditional_rendering
		//VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000,
		//// Provided by VK_KHR_acceleration_structure
		//VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000,
		//// Provided by VK_KHR_ray_tracing_pipeline
		//VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 0x00200000,
		//// Provided by VK_EXT_fragment_density_map
		//VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000,
		//// Provided by VK_KHR_fragment_shading_rate
		//VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00400000,
		//// Provided by VK_EXT_mesh_shader
		//VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = 0x00080000,
		//// Provided by VK_EXT_mesh_shader
		//VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = 0x00100000,
		//// Provided by VK_EXT_device_generated_commands
		//VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT = 0x00020000,
	};
    // https://microsoft.github.io/DirectX-Specs/d3d/D3D12EnhancedBarriers.html#access-transitions
    // https://registry.khronos.org/vulkan/specs/latest/man/html/VkAccessFlagBits2.html
	enum AccessFlags : uint32_t
	{
		ACCESS_COMMON = 1 << 0,
		ACCESS_VERTEX_BUFFER = 1 << 1, // VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT 
		ACCESS_UNIFORM_BUFFER = 1 << 2, // CONSTANT_BUFFER, VK_ACCESS_2_UNIFORM_READ_BIT 
		ACCESS_INDEX_BUFFER = 1 << 3, // VK_ACCESS_2_INDEX_READ_BIT 
		ACCESS_RENDER_TARGET = 1 << 4, // VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT 
		ACCESS_STORAGE_ACCESS = 1 << 5, // UNORDERED_ACCESS, VK_ACCESS_2_SHADER_WRITE_BIT, VK_ACCESS_2_SHADER_READ_BIT
		ACCESS_DEPTH_STENCIL_WRITE = 1 << 6, // VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT 
		ACCESS_DEPTH_STENCIL_READ = 1 << 7, // VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT 
		ACCESS_SHADER_RESOURCE = 1 << 8, // 
		ACCESS_STREAM_OUTPUT = 1 << 9,
		ACCESS_INDIRECT_ARGUMENT = 1 << 10, // VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT 
		//ACCESS_PREDICATION = 1 << 11,
		ACCESS_COPY_DEST = 1 << 12, // VK_ACCESS_2_TRANSFER_READ_BIT 
		ACCESS_COPY_SOURCE = 1 << 13, // VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR 
		//ACCESS_RESOLVE_DEST = 1 << 14,
		//ACCESS_RESOLVE_SOURCE = 1 << 15,
		ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_READ = 1 << 16,
		ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_WRITE = 1 << 17,
		ACCESS_SHADING_RATE_SOURCE = 1 << 18,
		ACCESS_VIDEO_DECODE_READ = 1 << 19,
		ACCESS_VIDEO_DECODE_WRITE = 1 << 20,
		ACCESS_VIDEO_PROCESS_READ = 1 << 21,
		ACCESS_VIDEO_PROCESS_WRITE = 1 << 22,
		ACCESS_VIDEO_ENCODE_READ = 1 << 23,
		ACCESS_VIDEO_ENCODE_WRITE = 1 << 24,
		NO_ACCESS = 1 << 25 // VK_ACCESS_2_NONE

		// No VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT due to no input attachments
	};
	// https://microsoft.github.io/DirectX-Specs/d3d/D3D12EnhancedBarriers.html#equivalent-d3d12_barrier_layout-for-each-d3d12_resource_states-bit
	enum class Layout
	{
		UNDEFINED,
		COMMON,
		PRESENT,
		LAYOUT_GENERIC_READ,
		RENDER_TARGET,
		UNORDERED_ACCESS, // Storage
		DEPTH_STENCIL_WRITE,
		DEPTH_STENCIL_READ,
		SHADER_RESOURCE,
		COPY_SOURCE,
		COPY_DEST,
		RESOLVE_SOURCE,
		RESOLVE_DEST,
		SHADING_RATE_SOURCE,
		VIDEO_DECODE_READ,
		VIDEO_DECODE_WRITE,
		VIDEO_PROCESS_READ,
		VIDEO_PROCESS_WRITE,
		VIDEO_ENCODE_READ,
		VIDEO_ENCODE_WRITE,
		DIRECT_QUEUE_COMMON,
		DIRECT_QUEUE_GENERIC_READ,
		DIRECT_QUEUE_UNORDERED_ACCESS,
		DIRECT_QUEUE_SHADER_RESOURCE,
		DIRECT_QUEUE_COPY_SOURCE,
		DIRECT_QUEUE_COPY_DEST,
		COMPUTE_QUEUE_COMMON,
		COMPUTE_QUEUE_GENERIC_READ,
		COMPUTE_QUEUE_UNORDERED_ACCESS,
		COMPUTE_QUEUE_SHADER_RESOURCE,
		COMPUTE_QUEUE_COPY_SOURCE,
		COMPUTE_QUEUE_COPY_DEST,
		VIDEO_QUEUE_COMMON,
	};

	struct ImageBarrier // VK_KHR_synchronization2
	{
		void* resource = nullptr;
		bool discard = false;
        // Sync Flags
		SyncStage src_stage;
		SyncStage dst_stage;
        // Access Flags
		AccessFlags src_access;
        AccessFlags dst_access;
        // Layout
		Layout src_layout;
		Layout dst_layout;
		// Subresource range
		ImageSubresourceRange subresource_range;
	};

    //struct MemoryBarrier
    //{
     
    //};
	//struct BufferBarrier
	//{
	//	
	//};
}